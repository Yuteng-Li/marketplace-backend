pipeline {
    
    agent {label 'built-in'}

    stages {
        stage('Checkout') {
            steps {
                sh "docker image prune -f"
                //Checkout Git Repo with application code, Dockerfile, and Helm Chart.
                echo '========== Continuous Integration begins here =========='
                git branch: 'main', credentialsId: 'mebad-demo-creds', url: 'https://gitlab.mynisum.com/mebad/springboot-petclinic.git'
            }
        }
        stage('Maven Build') {
            steps{
                //Build Application (Maven application in this case).
                sh './mvnw package'
            }
        }
        stage('Docker Build Image and Push') {
            steps {
                //Using DockerHub as Container Image repo. Log in, build image, and then push it to DockerHub using credentials.
                withCredentials([usernamePassword(credentialsId: 'mebad-demo-dockerhub-creds', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh """
                    docker login --username $USERNAME --password $PASSWORD
                    docker build -t $USERNAME/springboot-demo-app:${env.BUILD_NUMBER} .
                    docker push $USERNAME/springboot-demo-app:${env.BUILD_NUMBER}
                    docker image prune -f
                    """
                }
                echo '========== Continuous Integration ends here =========='
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                echo '========== Continuous Deployment begins here =========='
                withCredentials([usernamePassword(credentialsId: 'mebad-demo-dockerhub-creds', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    //Create namespace (if it doesn't exist), generate kubernetes manifest through helm, and deploy to kubernetes.
                    sh """
                    kubectl create namespace demo-ascend-namespace --dry-run=client -o yaml | kubectl apply -f -
                    helm template ./petclinic-helm -f petclinic-helm/values.yaml --set image.repository=$USERNAME/springboot-demo-app --set image.tag=${env.BUILD_NUMBER} | kubectl apply --namespace demo-ascend-namespace -f -  &&\
                    sleep 30
                    kubectl get all --namespace demo-ascend-namespace
                    """
                }
                echo '========== Continuous Deployment ends here =========='
            }
        }
        stage('Clean Workspace'){
            steps{
                cleanWs()
            }
        }
    }
}
